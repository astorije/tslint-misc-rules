class passes {
    propertyOne: any;
    propertyTwo: any;

    one() {
    }

    two() {
    }

    //documentation
    three() {
    }
}

class passesWithoutProperties {
    constructor() {
    }

    one() {
    }

    two() {
    }
}

class passesWithArrowFunctions {
    propertyOne: any;
    propertyTwo: any;

    one = () => {
    }

    two() {
    }

    three = () => {
    }

    four = () => {
    }
}

const passesAsExpression = class {
    one() {
    }

    two() {
    }
}

class passesWithOverloads {
    one();
    one(param: any) {
    }

    /** documentation */
    three(param: string): string;
    /** documentation */
    three(param: number): number;
    three(param: string | number) {
        return null;
    }
}

class fails {
    propertyOne: any;
    propertyTwo: any;
    one() {
    ~~~ [precededed-by-newline]
    }
    two() {
    ~~~ [precededed-by-newline]
    }
}

class failsWithArrowFunctions {
    propertyOne: any;
    propertyTwo: any;
    one = () => {
    ~~~ [precededed-by-newline]
    }
    two() {
    ~~~ [precededed-by-newline]
    }
    three = () => {
    ~~~~~ [precededed-by-newline]
    }
    four = () => {
    ~~~~ [precededed-by-newline]
    }
}

class fixesWithMemberModifiers {
    one: any;
    protected getOne() { return this.one; };
              ~~~~~~ [precededed-by-newline]
    private getTwo() {
            ~~~~~~ [precededed-by-newline]
        return null;
    }
    public getThree = () => null;
           ~~~~~~~~ [precededed-by-newline]
    static getFour() { return null; };
           ~~~~~~~ [precededed-by-newline]
    async getFive() { return await null; };
          ~~~~~~~ [precededed-by-newline]
}

class failsWithoutProperties {
    constructor() {
    }
    one() {
    ~~~ [precededed-by-newline]
    }
    two() {
    ~~~ [precededed-by-newline]
    }
}

const failsAsExpression = class {
    one() {
    }
    two() {
    ~~~ [precededed-by-newline]
    }
}

class failsWithOverloads {
    one() {
    }
    two(param: string): string;
    ~~~ [precededed-by-newline]
    two(param: number): any {
        return null;
    }
}

[precededed-by-newline]: class methods should be preceded by an empty line
